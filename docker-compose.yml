version: '3.8'

services:
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"  # Tempo HTTP server
      - "4319:4317"  # OTLP gRPC
      - "4320:4318"  # OTLP HTTP
      - "9411:9411"  # Zipkin compatibility
      - "14251:14250"
      - "14269:14268"
    networks:
      - opentelemetry-network

  tempo-query:
    image: grafana/tempo-query:latest
    container_name: tempo-query
    environment:
      - TEMPO_QUERY_FRONTEND_ADDR=tempo:3200
    ports:
      - "16688:16686"  # UI similar to Jaeger
    depends_on:
      - tempo
    networks:
      - opentelemetry-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - tempo
    networks:
      - opentelemetry-network

  todo:
    build: 
      context: .
      dockerfile: dockerfile.todo-service
    volumes:
      - .:/usr/src/app:rw
    ports:
      - 8081:8080
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=production
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/v1/traces  # OTLP trace exporter URL
    depends_on:
      - collector
    networks:
      - opentelemetry-network

  auth:
    build: 
      context: .
      dockerfile: dockerfile.auth-service
    volumes:
      - .:/usr/src/app:rw
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=production
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/v1/traces  # OTLP trace exporter URL
    depends_on:
      - collector
    networks:
      - opentelemetry-network

  redis:
    image: redis:latest
    ports:
      - '6379:6379'
    networks:
      - opentelemetry-network

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    ports:
      - 16686:16686
      - 14250:14250
      - 14268:14268
      - 5775:5775
    environment:
      - METRICS_PROMETHEUS_HANDLER_PATH=/metrics
    networks:
      - opentelemetry-network

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - 9090:9090
    networks:
      - opentelemetry-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - opentelemetry-network

  splunk:
    image: splunk/splunk
    command:
      - 'docker run -p 8000:8000 -e "SPLUNK_PASSWORD=Waheguru@2911" -e "SPLUNK_START_ARGS=--accept-license" -it --name localhost splunk/splunk:latest'
    ports:
      - 8000:8000
    networks:
      - opentelemetry-network

  collector:
    image: otel/opentelemetry-collector-contrib
    container_name: collector
    volumes: 
      - ./collector/collector.yml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "8889:8889"
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - jaeger
      - prometheus
      - splunk
      - grafana
    networks:
      - opentelemetry-network

volumes:
  grafana-data:

networks:
  opentelemetry-network:
    driver: bridge
